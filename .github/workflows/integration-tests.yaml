name: Integration Tests
env:
  AWS_DEFAULT_REGION: us-east-1
  AWS_DEFAULT_OUTPUT: text
on:
  push: {branches: [main]}
  pull_request: {branches: [main]}
jobs:
  eks:
    outputs:
      cluster-name: ${{ steps.create-cluster.outputs.cluster-name }}
      oidc-arn: ${{ steps.oidc.outputs.arn }}
      oidc-issuer: ${{ steps.oidc.outputs.issuer }}
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - id: create-cluster
      env:
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl create cluster --name aws-iam-controller-integration-${{ github.run_number }} --zones $(echo ${AWS_DEFAULT_REGION}{a,b,c,d} | tr ' ' ',')
        echo "::set-output name=cluster-name::aws-iam-controller-integration-${{ github.run_number }}"
    - if: failure()
      run: eksctl delete cluster --name aws-iam-controller-integration-${{ github.run_number }}
    - id: oidc
      env:
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      run: |
        issuer=$(aws eks describe-cluster --name ${{ steps.create-cluster.outputs.cluster-name }} --query "cluster.identity.oidc.issuer" | sed 's/https:\/\///g')
        arn="arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:oidc-provider/${issuer}"
        echo "::set-output name=arn::${arn}"
        echo "::set-output name=issuer::$issuer"
  terraform:
    timeout-minutes: 2
    outputs:
      role-arn: ${{ steps.role-arn.outputs.role-arn }}
    needs: [eks]
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: terraform
    strategy:
      fail-fast: false
      matrix:
        go-version: [ "1.17" ]
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
    - run: terraform init
    - env:
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      run: |
          terraform apply -var=role-name=aws-iam-controller-${{ github.run_number }} -auto-approve -var=account_id=${{ secrets.AWS_ACCOUNT_ID }} -var=oidc_issuer=${{ needs.eks.outputs.oidc-issuer }}
    - run: echo "::set-output name=role-arn::$(terraform output -raw role-arn)"
      id: role-arn
  integration:
    env:
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    needs: [terraform,eks]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        go-version: [ "1.17" ]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}
      - uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}
      - run: make docker-build && make docker-push
      - run: aws eks update-kubeconfig --name ${{ needs.eks.outputs.cluster-name }}
      - run: make deploy
      - run: kubectl annotate serviceaccount -n aws-iam-controller-system aws-iam-controller-manager \
          eks.amazonaws.com/role-arn=${{ needs.terraform.outputs.role-arn }}
      - run: |-
          cat <<EOF > ${{ runner.temp }}/patch.json
          [
            {
              "op": "add",
              "path": "/spec/template/spec/containers/1/args/-",
              "value": "--oidc-arn=arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:oidc-provider/${{ needs.eks.outputs.oidc-issuer }}"
            },
            {
              "op": "add",
              "path": "/spec/template/spec/containers/1/args/-",
              "value": "--resource-default-path=${{ needs.eks.outputs.cluster-name }}"
            }
          ]
          EOF
      - run: kubectl patch deployment aws-iam-controller-controller-manager \
               --namespace aws-iam-controller-system \
               --type='json' \
               --patch "$(cat ${{ runner.temp }}/patch.json)"
      - run: kubectl wait --for=condition=ready pod -l control-plane=controller-manager -n aws-iam-controller-system --timeout=5m
  cleanup:
    if: always()
    env:
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
    needs:
    - terraform
    - integration
    - eks
    runs-on: ubuntu-latest
    steps:
    - run: |
        curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
        sudo mv /tmp/eksctl /usr/local/bin
        eksctl delete cluster ${{ needs.eks.outputs.cluster-name }} || true
      if: always()
    - working-directory: terraform
      if: always()
      run: |
        terraform import \
            -var=role-name=aws-iam-controller-${{ github.run_number }} \
            -var=account_id=${{ secrets.AWS_ACCOUNT_ID }} \
            -var=oidc-issuer=${{ needs.eks.outputs.oidc-issuer }} aws_iam_role.aws_iam_controller aws-iam-controller-${{ github.run_number }} || true
    - working-directory: terraform
      if: always()
      run: |
        terraform destroy -auto-approve \
            -var=role-name=aws-iam-controller-${{ github.run_number }} \
            -var=account_id=${{ secrets.AWS_ACCOUNT_ID }} \
            -var=oidc-issuer=${{ needs.eks.outputs.oidc-issuer }}
